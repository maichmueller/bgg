name: linux

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        include:
          - os: ubuntu-20.04
            COMPILER: gcc-9
            LINKER: gcc-9

    steps:
      - uses: actions/checkout@v2
      - name: Cache libtorch dependency
        uses: actions/cache@v2
        id: cache-libtorch  # give it a name for checking the cache hit-or-not
        with:
          path: ./deps/libtorch  # what we cache: the folder
          key: ${{ runner.os }}-libtorch-${{ hashFiles('deps/dl_libtorch.sh') }}
          restore-keys: |
            ${{ runner.os }}-libtorch
      - name: load dependency
        run: |
          ./deps/dl_libtorch.sh --cuda=false --os=${{ runner.os }}
        if: steps.cache-libtorch.outputs.cache-hit != 'true'
      - name: build cmake
        run: |
          cmake . -DUSE_CUDA=OFF
      - name: make
        run: |
          make

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        include:
          - os: ubuntu-20.04
            COMPILER: gcc-9
            LINKER: gcc-9

    steps:
      - uses: actions/checkout@v2
      - name: Cache libtorch dependency
        uses: actions/cache@v2
        id: cache-libtorch  # give it a name for checking the cache hit-or-not
        with:
          path: ./deps/libtorch  # what we cache: the folder
          key: ${{ runner.os }}-libtorch-${{ hashFiles('deps/dl_libtorch.sh') }}
          restore-keys: |
            ${{ runner.os }}-libtorch
      - name: load dependency
        run: |
          ./deps/dl_libtorch.sh --cuda=false --os=${{ runner.os }}
        if: steps.cache-libtorch.outputs.cache-hit != 'true'
      - name: build cmake
        run: |
          cmake . -DUSE_CUDA=OFF
      - name: make
        run: |
          make
